n <- 2L
x <- seq(from=1L, length=4000, by=2L)
n<-(i +1)
j <-i
## sieve of sundararam excludes non-primes from odd numbers where
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p[n] -> i
x[n] -> i
x[n+1] -> j
p_list <- c(x[1],x[2])
length p_list
length(p_list)
p <- x[4]
sundar <-function(i,j,p) {
}
sundar <-function(i,j,p) {
return(abs(p/((2i+1)(2j+1)))==0)}
?Mod()
?mod()
help mod()
help mod
Mod(1.35)
Mod(2.35)
abs(2.35)
abs((2.35/2)
)
abs((2.35/2))
p
p==(2i+1)
p==(2i+1)(2j+1)
p==(2i+1)*(2j+1)
p==((2(i)+1)*(2(j)+1))
2i
s*i
2*i
p==(((2*i)+1)*((2*j)+1))
(((2*i)+1)*((2*j)+1))
i<-1L
j<-i
(((2*i)+1)*((2*j)+1))
j+=1
j+1L->j
(((2*i)+1)*((2*j)+1))
for(i in 1:4000)
for(j in 1:4000)
(((2*i)+1)*((2*j)+1))
for(i in 1:4000){
for(j in 1:4000){
(((2*i)+1)*((2*j)+1))}}
for(i in 1:4000){
for(j in 1:4000){
a_list[i] <- (((2*i)+1)*((2*j)+1))}}
a_list <- rep(0,4000)
for(j in 1:4000){
for(i in 1:4000){
a_list[i] <- (((2*i)+1)*((2*j)+1))}}
for(i in 1:4000){ for(j in 1:4000){ alist[(i*j)]<-(((2*i)+1)*((2*j)+1))}}
for(i in 1:p){ for(j in 1:i){ alist[(i*j)]<-(((2*i)+1)*((2*j)+1))}}
for(i in 1:p){ for(j in 1:i){ alist[i]<-(((2*i)+1)*((2*j)+1))}}
alist[i]
alist[1]
a_list <- rep(0, 4000)
for(i in 1:p){ for(j in 1:i){ a_list[i]<-(((2*i)+1)*((2*j)+1))}}
remove(alist)
sundar <- function(limit, candidate) {
for( i in 1:limit ){
for (j in 1:i){
if (candidate == (((2*i)+1)*((2*j)+1))) return(FALSE)}}
return(TRUE)}
sundar((p-1),p)
sundar((p-1),x[3])
sundar((p-1),x[4])
x[4]
x[5]
sundar((x[5]-1),x[5])
sundar <- function(candidate) {
limit <- candidate-1
for( i in 1:limit ){
for (j in 1:i){
if (candidate == (((2*i)+1)*((2*j)+1))) return(FALSE)}}
return(TRUE)}
sundar(x[4])
for(a in 1:length(x))
if(sundar(x[a])) p_list[a]<-x[a]
remove p_list
remove(p_list)
pl_list <-NA
length(pl_list)
remove(pl_list)
p_list <- NULL
length(p_list)
p_list[length(p_list)]
for(a in 1:length(x)){
if(sundar(x[a])) {p_list[length(p_list)+1]<-x[a]
print(x[a])}}
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
is.prime(463)
apropos prime
apropos(prime)
help prime
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
warnings()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
Mod(pi)
p_list
methods(is)
source('~/.active-rstudio-document')
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
help div()
help(div)
??div
??modulo
??integer
help apply
help(apply)
source('~/.active-rstudio-document')
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
oddArray <- seq(from1L, length 4000, by=2L)
oddArray <- seq(from=1L, length=4000, by=2L)
tapply(oddArray, sundarum())
tapply(oddArray, sundaram())
sundaram(oddArray)
tapply(oddArray, sundaram
)
tapply(oddArray, sundaram)
5/2
abs(5/2)
Mod(5/2)
integer(abs(5/2))
integer()
help(integer
)
as.integer(abs(5/2))
as.integer(5/2
)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
round(5/2)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
abs(5/2 - round(5/2))
mod()
mod <-function(number, divisor){
return(number/divisor - abs(number/divisor))}
mod <-function(number, divisor){
if(number==0 || divisor==0) print
error(divide by zero)
mod <-function(number, divisor){
if(number==0 || divisor==0) {
error("divide by 0 error")}
return(number/divisor - abs(number/divisor))}
mod(5, 2)
mod(5, 0)
help(stderr)
help(warning)
mod <-function(number, divisor){
if(number==0 || divisor==0) {
stop("divide by 0 error")}
return(number/divisor - abs(number/divisor))}
mod(5, 0)
mod(0, 2)
mod(5, 2)
mod(4, 2)
abs(5/2)
mod <-function(number, divisor){
if(number==0 || divisor==0) {
stop("divide by 0 error")}
return(number/divisor - round(number/divisor))}
mod <-function(number, divisor){
if(number==0 || divisor==0) {
stop("divide by 0 error")}
return(number/divisor - round(number/divisor))}
mod(4, 2)
mod(5, 2)
mod <-function(number, divisor){
if(number==0 || divisor==0) {
stop("divide by 0 error")}
return(10*(number/divisor - round(number/divisor)))}
mod(5, 2)
as.integer(5)/as.integer(2)
round(4/2)
mod <-function(number, divisor){ if(number==0 || divisor==0) {stop("divide by 0 error")}return(number/divisor - round(number/divisor))}
mod <-function(number, divisor){ if(number==0 || divisor==0) {stop("divide by 0 error")} return(number/divisor - round(number/divisor))}
mod <-function(number, divisor)
{ if(number==0 || divisor==0) stop("divide by 0 error")
return(number/divisor - round(number/divisor))}
mod(5/2)
mod(5 2)
mod(5, 2)
if( mod(5, 2) == 0) print TRUE
if( mod(5, 2) == 0) print(TRUE)
if( mod(4, 2) == 0) print(TRUE)
sundaram(7725)
5/3
abs(5/3)
round(5/3)
round(5/3) * 3
truncate
truncate(5/3)
trunc(5/3)
trunc(5/3) * 3
5-(trunc(5/3) * 3)
modulus <- function(numerator, denominator)
{ return(numerator-(trunc(numerator/denominator)*denominator))}
modulus(5/3)
modulus(5, 3)
modulus(7, 3)
modulus(7, 1)
is.odd()
is.even()
is.even <- function(testforeve){
if(testforeven==1) return(FALSE)
if(modulus(testforeven,2)==0) return(TRUE)
return(FALSE)}
is.even(999)
is.even <- function(testforeven){
if(testforeven==1) return(FALSE)
if(modulus(testforeven,2)==0) return(TRUE)
return(FALSE)}
is.even(999)
is.even(990)
is.even(1)
is.even(1.1)
is.even(1.2)
seq()
help(seq)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
sqrt(100000007)
10000*10000
100000007
100000007>10000^2
(sqrt(100000007)+1)^2
(sqrt(100000007)-1)^2
(sqrt(100000007)-1) * (sqrt(100000007)+1)
(sqrt(100000007)-1) * (sqrt(100000007))
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
help(tic())
help(tic
)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
help(time)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
testSundaram()
source('~/.active-rstudio-document')
p_list <- testSundaram()
length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram()
p_list
source('~/.active-rstudio-document')
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
p_list
11^2
num<-5
(2*num)
(2*num)^2
sqrt(100)+1
sqrt(100+1)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/.active-rstudio-document')
p_list <- testSundaram() ; length(p_list)
help(seq)
source('~/.active-rstudio-document')
p_list <- testSundaram() ; length(p_list)
p_list
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
p_list
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
p_list[1007]
p_list[1008]
help(time)
system.time(p_list <- testSundaram() ; length(p_list))
system.time(p_list <- testSundaram()) ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
help(while)
help(for)
help for
help "for()"
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
print(p_list)
print("go", p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
Sys.time()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
Sys.time()
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
system.time(is.even(3))
system.time(sundaram(999999997))
stime <- system.time(sundaram(999999993))
stime
system.time(sundaram(999999997))
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
system.time(sundaram(999999997))
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
print(1, \n, 2)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
p_list
testSundaram()
p_list <- testSundaram() ; length(p_list)
timeSundaram()
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
timeSundaram()
testSundaram()
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
p_list
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
p_list
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
p_list
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list) ; p_list
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list) ; p_list
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
source('~/Documents/MOOC Classes/Intro to Mathematical Thinking/sieve.r')
p_list <- testSundaram() ; length(p_list)
p_list
library("dplyr", lib.loc="/media/sdb1/Projects/R/x86_64-unknown-linux-gnu-library/3.1")
library("swirl", lib.loc="/usr/local/lib64/R/library")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
?gather
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students2
students3
View(students3)
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
View(students4)
?select
submit()
View(student_info)
?unique
student_info %>% unique
submit()
View(gradebook); passed
failed
View("passed") ; View("failed")
passed
?mutate
mutate(passed, status="passed")
mutate(passed, status="passed") -> passed
mutate(failed, status="failed")-> failed
?rbind_list
View(passed) ; View(failed)
rbind_list(passed, failed)
sat
sat %>% select(score_range:read_fem, math_male, math_fem, write_male, write_fem)
?Selection
help(select())
help("Selection")
sat(select(contains(read)))
sat%>%select(contains(read))
sat%>%select(contains("read""))
sat%>%select(contains("read"))
sat %>% select(score_range, contains("read_"), contains("math_"), contains("write_")
sat %>% select(score_range, contains("read_"), contains("math_"), contains("write_"))
View(sat)
sat %>% select(score_range, contains("_male"), contains("_female"))
sat %>% select(score_range, contains("_female"), contains("_male"))
sat %>% select(score_range, -contains("_total"))
sat %>% select(score_range:write_fem, -contains("_total"))
sat %>% select(score_range, contains("_fem"), contains("_male"))
sat %>% select(score_range, contains("_fem"), contains("_male")) %>% gather( part_sex, value=count, - score_range)
?separate
sat %>% select(score_range, contains("_fem"), contains("_male")) %>% gather( part_sex, value=count, - score_range) %>% separate(part_sex,c("part","sex"))
submit()
?group_by
source('~/Projects/Rstudio/gettingandcleaningdata/swirl/script8.R')
source('~/Projects/Rstudio/gettingandcleaningdata/swirl/script8.R') %>% group_by(part, sex)
source('~/Projects/Rstudio/gettingandcleaningdata/swirl/script9.R')
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
today() ->this_day
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_day
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
ymd("1989-05-17") -> my_date
mydate
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(2508195)
dmy(25081985)
ymd("192012")
ymd("19/20/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt1
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
update(this_moment, now()) -> this_moment
this_moment
update(this_moment, hours=13, minutes=52, seconds=30)
this_moment
now("America/New_York") -> nyc
nyc
depart <- nyc +days(2)
depart
depart <- update(depart, hours=hours(depart)+17, minutes=minutes(depart)+34)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive = depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone="Asia/Hong_Kong") -> arrive
arrive
last_time <- with_tz(mdy("June 17, 2008"),tzone="Asia/Singapore")
last_time <- mdy("June 17, 2008",tzone="Singapore")
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
new_interval(last_time, arrive) -> how_long
as.period(how_long)
stopwatch()
View(students4)
